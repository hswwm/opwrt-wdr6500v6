name: C/C++ CI

on:
  workflow_dispatch:
env:
  SSH_ACTIONS: true
jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
#     - name: Space cleanup
#       env:
#           DEBIAN_FRONTEND: noninteractive
#       run: |
#           docker rmi `docker images -q`
#           sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
#           sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php* android*
#           sudo -E apt-get update
#           sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig
#           sudo -E apt-get -y autoremove --purge
#           sudo -E apt-get clean
#           df -h
    - name: update
      run: ./scripts/feeds update -a
    - name: install
      run: ./scripts/feeds install -a
    - name: conf
      uses: P3TERX/debugger-action@main
      if: env.SSH_ACTIONS == 'true' || contains(github.event.action, 'ssh')
      #run: make menuconfig
      #run: make defconfig
    - name: mkdl
      run: make -j8 download
    - name: mk
      run: |
           make V=s
           echo "======================="
           echo "Space usage:"
           echo "======================="
           df -h
           echo "======================="
           du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
           du -h --max-depth=1 ./build_dir
           du -h --max-depth=1 ./bin
      
    - name: Prepare artifact
      run: |
          mkdir -p ./artifact/firmware/configfile
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf ./.config ./artifact/firmware/configfile/
          cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/
    - name: Deliver buildinfo
      uses: actions/upload-artifact@v2
      with:
          name: OpenWrt_buildinfo
          path: ./artifact/buildinfo/

    - name: Deliver package
      uses: actions/upload-artifact@v2
      with:
          name: OpenWrt_package
          path: ./artifact/package/

    - name: Deliver firmware
      uses: actions/upload-artifact@v2
      with:
          name: OpenWrt_firmware
          path: ./bin/targets/
          
    - name: Upload artifact
      uses: actions/upload-artifact@master
      with:
          name: OpenWrt firmware
          path: ./artifact/
